// //// JC version: 3
#include <dumpstack.jch>
#include <path.jch>
#include <fs.jch>
#include <console.jch>
#include <json.jch>
#include <unicode.jch>
#include <stdlib.h>
#include '../parser/findama.jch'
#include '../script/jsapi.jch'
#include '../script/jsenv.jch'

int! main(int! argc, char**! argv) {
	if( argc < 2 ) {
		//no macros, no output file name
		//whatever you need, put in the script
		console.log('usage: ama [-s script] <files>');
		return 1;
	}
	///////////
	char*! home_dir = NULL;
	#if defined(_WIN32)
		intptr_t! lg = GetEnvironmentVariableW(`L"USERPROFILE"`, NULL, 0);
		if( lg != ERROR_ENVVAR_NOT_FOUND ) {
			uint16_t[+]! buf = new uint16_t[+]!(lg);
			lg = GetEnvironmentVariableW(`L"USERPROFILE"`, LPWSTR(buf.data()), lg);
			buf.resize(lg);
			//this leak should be OK
			home_dir = strdup(unicode::UTF16ToUTF8(buf).c_str());
		}
	#else
		home_dir = getenv("HOME");
	#endif
	if( !home_dir ) {
		home_dir = "/";
	}
	ama::std_module_dir = <<path.join(home_dir, '.ama_modules');
	ama::std_module_dir_global = '/usr/share/ama_modules';
	///////////
	ama::InitScriptEnv();
	char[+]! extra_script;
	int! has_file = 0;
	for(int! i = 1; i < argc; i += 1) {
		if( strcmp(argv[i], "-s") == 0 && (i + 1) < argc ) {
			extra_script.push(argv[i + 1], ';\n');
			i += 1;
			continue;
		}
		char[+]^+! file_data = fs.readFileSync(argv[i]);
		if( file_data == NULL ) {
			console.error('unable to load', argv[i]);
			return 1;
		}
		char![+]! script_i = ama::FindAma(file_data);
		if( extra_script.length ) {
			script_i = <<JC::string_concat(extra_script, script_i);
		}
		has_file = 1;
		if( !ama::RunScriptOnFile(script_i, argv[i], file_data.c_str()) ) {
			return 1;
		}
	}
	if( !has_file ) {
		if( extra_script.length ) {
			if( !ama::RunScriptOnFile(extra_script, "<command line>", extra_script.c_str()) ) {
				return 1;
			}
		} else {
			console.log('usage: ama [-s script] <files>');
			return 1;
		}
	}
	return 0;
}
