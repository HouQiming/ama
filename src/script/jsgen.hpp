#ifndef _JSGEN_JCH_HPP
#define _JSGEN_JCH_HPP
/*#pragma add("jc_files", "./jsgen.jc");*/
namespace ama {
	void GeneratedJSBindings();
};

#endif
auto NodeGet_node_class(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_node_class(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_indent_level(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_indent_level(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_tmp_flags(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_tmp_flags(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_flags(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_flags(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_data(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_data(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_comments_before(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_comments_before(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_comments_after(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_comments_after(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_c(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_c(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_s(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_s(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_p(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_p(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
auto NodeGet_v(JSContext* jsctx, JSValueConst this_val);
auto NodeSet_v(JSContext* jsctx, JSValueConst this_val, JSValueConst val);
JSValue NodeCall_setData(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_setFlags(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_setCommentsBefore(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_setCommentsAfter(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_setIndent(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Clone(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_ReplaceWith(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Unlink(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Insert(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Root(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_RootStatement(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_isAncestorOf(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Owning(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Owner(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_LastChildSP(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_LastChild(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_CommonAncestor(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_GetStringValue(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_dot(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_FreeASTStorage(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Find(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_FindAll(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_FindAllWithin(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_FindAllBefore(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_isRawNode(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_GetName(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_toSource(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_isMethodCall(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_InsertDependency(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_InsertCommentBefore(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_MergeCommentsBefore(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_MergeCommentsAfter(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_MergeCommentsAndIndentAfter(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_DestroyForSymbol(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_isSymbol(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_isRef(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Validate(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_ValidateEx(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_NeedTrailingSemicolon(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_GetCommentedIndentLevel(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_ParentStatement(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Prev(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_BreakSibling(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_BreakChild(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_BreakSelf(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_ReplaceUpto(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_ValidateChildCount(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_AdjustIndentLevel(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_PreorderNext(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_PreorderSkipChildren(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_PreorderLastInside(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_PostorderFirst(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_PostorderNext(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_toSingleNode(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_Unparse(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_GetCFGRole(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);
JSValue NodeCall_isChildCFGDependent(JSContext* jsctx, JSValueConst this_val, int argc, JSValueConst* argv);

