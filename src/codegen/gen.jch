// //// JC version: 3
#pragma add("jc_files", "./gen.jc");

namespace ama {
	`class CodeGenerator;`
	`typedef int(*FGeneratorHook)(ama::CodeGenerator*,ama::Node*);`
	`typedef int(*FGeneratorHookComment)(ama::CodeGenerator*,const char*,intptr_t,intptr_t);`
	class CodeGenerator {
		//ignore offsets for now
		//provide a separate service to convert some (unicode) tag into cite-like comments later
		char[+]! code;
		void*! opaque = NULL;
		FGeneratorHook! hook = NULL;
		FGeneratorHookComment! hook_comment = NULL;
		intptr_t! scope_indent_level = 0L;
		intptr_t! current_indent_level = 0L;
		int32_t! tab_width = 4;
		int8_t! in_new_line = 1;
		void! GenerateDefault(ama::CodeGenerator*+! this, ama::Node*+! nd);
		void! GenerateComment(ama::CodeGenerator*+! this, intptr_t! expected_indent_level, char[...]! comment);
		void! Generate(ama::CodeGenerator*+! this, ama::Node*+! nd);
		void! GenerateSpaceBefore(ama::CodeGenerator*+! this, ama::Node*+! nd_next);
		void! GenerateIndent(ama::CodeGenerator*+! this, intptr_t! expected_indent_level);
		void! GenerateCommentDefault(ama::CodeGenerator*+! this, intptr_t! expected_indent_level, char[...]! comment);
	};
	char[+]! GenerateCode(ama::Node*+! nd, JSValueConst! options);
};
